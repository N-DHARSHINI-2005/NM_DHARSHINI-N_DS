# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import gradio as gr

# 1. Data Preprocessing
df = pd.read_csv('/mnt/data/stock_data.csv')

# Parse dates if needed
df['Date'] = pd.to_datetime(df['Date'])
df = df.sort_values('Date')

# Check missing values
df = df.dropna()

# 2. Exploratory Data Analysis
print("Data Summary:\n", df.describe())
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title('Feature Correlation Heatmap')
plt.show()

# Distribution of closing prices
sns.histplot(df['Close'], kde=True)
plt.title('Closing Price Distribution')
plt.show()

# 3. Feature Engineering
# Create moving averages
df['MA7'] = df['Close'].rolling(window=7).mean()
df['MA21'] = df['Close'].rolling(window=21).mean()

# Create returns
df['Return'] = df['Close'].pct_change()

# Lag feature
df['Lag1'] = df['Close'].shift(1)

# Drop rows with NaN after feature engineering
df = df.dropna()

# Features and target
features = ['Open', 'High', 'Low', 'Volume', 'MA7', 'MA21', 'Return', 'Lag1']
X = df[features]
y = df['Close']

# 4. Model Building & Evaluation
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict
y_pred = model.predict(X_test)

# Evaluation
print("MAE:", mean_absolute_error(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
print("R2 Score:", r2_score(y_test, y_pred))

# 5. Visualization of Results
plt.figure(figsize=(10,5))
plt.plot(y_test.values, label='True')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.title('True vs Predicted Closing Prices')
plt.show()

# 6. Deployment using Gradio
def predict_stock(Open, High, Low, Volume, MA7, MA21, Return, Lag1):
    input_data = pd.DataFrame({
        'Open': [Open],
        'High': [High],
        'Low': [Low],
        'Volume': [Volume],
        'MA7': [MA7],
        'MA21': [MA21],
        'Return': [Return],
        'Lag1': [Lag1]
    })
    pred = model.predict(input_data)
    return pred[0]

interface = gr.Interface(
    fn=predict_stock,
    inputs=[
        gr.Number(label="Open"),
        gr.Number(label="High"),
        gr.Number(label="Low"),
        gr.Number(label="Volume"),
        gr.Number(label="MA7"),
        gr.Number(label="MA21"),
        gr.Number(label="Return"),
        gr.Number(label="Lag1"),
    ],
    outputs=gr.Number(label="Predicted Close Price"),
    title="Stock Price Predictor"
)

interface.launch()
